// This file is part of Notepad4.
// See License.txt for details about distribution and modification.
//! Lexer for Geogebra Script.

#include <cassert>
#include <cstring>

#include <string>
#include <string_view>

#include "ILexer.h"
#include "Scintilla.h"
#include "SciLexer.h"

#include "WordList.h"
#include "LexAccessor.h"
#include "Accessor.h"
#include "StyleContext.h"
#include "CharacterSet.h"
#include "StringUtils.h"
#include "LexerModule.h"

using namespace Lexilla;

namespace {

//KeywordIndex++Autogenerated -- start of section automatically generated
enum {
	KeywordIndex_Keyword = 0,
	KeywordIndex_Constant = 1,
	KeywordIndex_Innerfunction = 2,
	KeywordIndex_Function = 3,
	MaxKeywordSize = 32,
};
//KeywordIndex--Autogenerated -- end of section automatically generated

enum class KeywordType {
	None = SCE_GGB_DEFAULT,
	Return = 0x40,
};

constexpr bool IsSpaceEquiv(int state) noexcept {
	return state <= SCE_GGB_TASKMARKER;
}

void ColouriseGgbDoc(Sci_PositionU startPos, Sci_Position lengthDoc, int initStyle, LexerWordList keywordLists, Accessor &styler) {
	int lineStateLineType = 0;

	KeywordType kwType = KeywordType::None;

	int visibleChars = 0;
	int chPrevNonWhite = 0;

	StyleContext sc(startPos, lengthDoc, initStyle, styler);

	while (sc.More()) {
		switch (sc.state) {
		case SCE_GGB_OPERATOR:
			sc.SetState(SCE_GGB_DEFAULT);
			break;

		case SCE_GGB_NUMBER:
			if (!IsNumberStart(sc.ch, sc.chNext)) {
				sc.SetState(SCE_GGB_DEFAULT);
			}
			break;

		case SCE_GGB_COMMENTLINE:
			if (sc.atLineStart) {
				sc.SetState(SCE_GGB_DEFAULT);
			}
			break;
		case SCE_GGB_IDENTIFIER:
			if (!IsAlphaNumeric(sc.ch)) {
				char s[MaxKeywordSize];
				sc.GetCurrent(s, sizeof(s));
				if (keywordLists[KeywordIndex_Keyword].InList(s)) {
					sc.ChangeState(SCE_GGB_WORD);
				} else if (keywordLists[KeywordIndex_Constant].InList(s)) {
					sc.ChangeState(SCE_GGB_CONSTANT);
				} else if (keywordLists[KeywordIndex_Innerfunction].InList(s)) {
					sc.ChangeState(SCE_GGB_INNERFUNCTION);
				} else if (keywordLists[KeywordIndex_Function].InList(s)) {
					sc.ChangeState(SCE_GGB_FUNCTION);
				}
				sc.SetState(SCE_GGB_DEFAULT);
			}
			break;
		}


		if (sc.state == SCE_GGB_DEFAULT) {
			if (sc.ch == '#') {
				sc.SetState(SCE_GGB_COMMENTLINE);
				if (visibleChars == 0) {
					lineStateLineType = SimpleLineStateMaskLineComment;
				}
			} else if (IsADigit(sc.ch)) {
				sc.SetState(SCE_GGB_NUMBER);
			} else if (IsIdentifierStart(sc.ch)) {
				sc.SetState(SCE_GGB_IDENTIFIER);
			} else if (IsAGraphic(sc.ch) && !(sc.ch == '\\' || sc.ch == '`')) {
				sc.SetState(SCE_GGB_OPERATOR);
			}
		}

		if (!isspacechar(sc.ch)) {
			visibleChars++;
			if (!IsSpaceEquiv(sc.state)) {
				chPrevNonWhite = sc.ch;
			}
		}


		if (sc.atLineEnd) {
			styler.SetLineState(sc.currentLine, lineStateLineType);
			lineStateLineType = 0;
			visibleChars = 0;
			kwType = KeywordType::None;
		}
		sc.Forward();
	}

	sc.Complete();
}

struct FoldLineState {
	int lineComment;
	int moduleImport;
	constexpr explicit FoldLineState(int lineState) noexcept:
		lineComment(lineState & SimpleLineStateMaskLineComment),
		moduleImport((lineState >> 1) & 1) {
	}
};

void FoldGgbDoc(Sci_PositionU startPos, Sci_Position lengthDoc, int initStyle, LexerWordList /*keywordLists*/, Accessor &styler) {
	const Sci_PositionU endPos = startPos + lengthDoc;
	Sci_Line lineCurrent = styler.GetLine(startPos);
	FoldLineState foldPrev(0);
	int levelCurrent = SC_FOLDLEVELBASE;
	if (lineCurrent > 0) {
		levelCurrent = styler.LevelAt(lineCurrent - 1) >> 16;
		foldPrev = FoldLineState(styler.GetLineState(lineCurrent - 1));
		const Sci_PositionU bracePos = CheckBraceOnNextLine(styler, lineCurrent - 1, SCE_ASY_OPERATOR, SCE_ASY_TASKMARKER);
		if (bracePos) {
			startPos = bracePos + 1; // skip the brace
		}
	}

	int levelNext = levelCurrent;
	FoldLineState foldCurrent(styler.GetLineState(lineCurrent));
	Sci_PositionU lineStartNext = styler.LineStart(lineCurrent + 1);

	int styleNext = styler.StyleIndexAt(startPos);
	int style = initStyle;
	int visibleChars = 0;

	while (startPos < endPos) {
		style = styleNext;
		styleNext = styler.StyleIndexAt(++startPos);

		switch (style) {
			case SCE_GGB_OPERATOR: {
				const char ch = styler[startPos - 1];
				if (ch == '{' || ch == '[' || ch == '(') {
					levelNext++;
				} else if (ch == '}' || ch == ']' || ch == ')') {
					levelNext--;
				}
			}
				break;
			default:
				break;
		}

		if (visibleChars == 0 && !IsSpaceEquiv(style)) {
			++visibleChars;
		}
		if (startPos == lineStartNext) {
			const FoldLineState foldNext(styler.GetLineState(lineCurrent + 1));
			levelNext = sci::max(levelNext, SC_FOLDLEVELBASE);
			if (foldCurrent.lineComment) {
				levelNext += foldNext.lineComment - foldPrev.lineComment;
			} else if (visibleChars) {
				const Sci_PositionU bracePos = CheckBraceOnNextLine(styler, lineCurrent, SCE_ASY_OPERATOR, SCE_ASY_TASKMARKER);
				if (bracePos) {
					levelNext++;
					startPos = bracePos + 1; // skip the brace
					style = SCE_ASY_OPERATOR;
					styleNext = styler.StyleIndexAt(startPos);
				}
			}

			const int levelUse = levelCurrent;
			int lev = levelUse | (levelNext << 16);
			if (levelUse < levelNext) {
				lev |= SC_FOLDLEVELHEADERFLAG;
			}
			styler.SetLevel(lineCurrent, lev);

			lineCurrent++;
			lineStartNext = styler.LineStart(lineCurrent + 1);
			levelCurrent = levelNext;
			foldPrev = foldCurrent;
			foldCurrent = foldNext;
			visibleChars = 0;
		}
	}
}

}

extern const LexerModule lmGgb(SCLEX_GEOGEBRA, ColouriseGgbDoc, "Geogebra", FoldGgbDoc);
